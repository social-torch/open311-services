AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: API Gateway, Dynamo DB and Cognito Authorizer for Open311

Parameters:
  Stage:
    Type: String
  CognitoUserPool:
    Type: String
  ImageBucket:
    Type: String

#Globals:
#  Api:
    # Allows an application running locally on port 8080 to call this API
#    Cors:
#      AllowMethods: "OPTIONS, GET"
#      AllowHeaders: "Content-Type"
#      AllowOrigin: "*"

Resources:
  Open311APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: AuthUser
        Authorizers:
          AuthUser:
            UserPoolArn: !Ref CognitoUserPool
            Identity:
              Header: Authorization
  Services:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handler/service
      Runtime: go1.x
      Tracing: Active
      Events:
        GetServices:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /services
            Method: get
        GetService:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /service/{id}
            Method: get
  Requests:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handler/request
      Runtime: go1.x
      Tracing: Active
      Events:
        GetRequests:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /requests
            Method: get
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /request/{id}
            Method: get
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /request
            Method: post
  Images:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handler/images
      Runtime: go1.x
      Tracing: Active
      Environment:
        Variables:
          IMAGE_BUCKET: !Ref ImageBucket
      Events:
        GetFetchURL:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /images/fetch/{key}
            Method: get
        GetStoreURL:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /images/store/{key}
            Method: get
  Users:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handler/user
      Runtime: go1.x
      Tracing: Active
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /user/{id}
            Method: get
        Feedback:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /feedback
            Method: post
  Cities:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handler/cities
      Runtime: go1.x
      Tracing: Active
      Events:
        GetCities:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /cities
            Method: get
        GetCity:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /city/{id}
            Method: get
        OnboardRequest:
          Type: Api
          Properties:
            RestApiId: !Ref Open311APIGateway
            Path: /city/onboard
            Method: post
    ServicesOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        RestApiId:
          Ref: !Ref Open311APIGateway
        ResourceId:
          Ref: !Ref Services
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
          PassthroughBehavior: WHEN_NO_MATCH
          RequestTemplates:
            application/json: '{"statusCode": 200}'
          Type: MOCK
        MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
Outputs:
  URL:
    Description: URL for HTTPS Endpoint
    Value:
      Fn::Join:
        - ''
        - - https://
          - Ref: Open311APIGateway
          - ".execute-api."
          - Ref: AWS::Region
          - ".amazonaws.com/"
          - Ref: Stage
